/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.2.3.0 (NJsonSchema v10.1.5.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IDistrictClient {
    getDistricts(): Observable<District[]>;
}

@Injectable()
export class DistrictClient implements IDistrictClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "https://firefinder.azurewebsites.net";
    }

    getDistricts(): Observable<District[]> {
        let url_ = this.baseUrl + "/api/district";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDistricts(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDistricts(<any>response_);
                } catch (e) {
                    return <Observable<District[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<District[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetDistricts(response: HttpResponseBase): Observable<District[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(District.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<District[]>(<any>null);
    }
}

export interface IDataClient {
    getCurrent(): Observable<RootObject>;
    getCurrent2(district: number): Observable<RootObject>;
    getLast6Hours(): Observable<RootObject>;
    getLast6Hours2(district: number): Observable<RootObject>;
    getCurrentDay(): Observable<RootObject>;
    getCurrentDay2(district: number): Observable<RootObject>;
    getLast2Days(): Observable<RootObject>;
    getLast2Days2(district: number): Observable<RootObject>;
}

@Injectable()
export class DataClient implements IDataClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "https://firefinder.azurewebsites.net";
    }

    getCurrent(): Observable<RootObject> {
        let url_ = this.baseUrl + "/api/current";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCurrent(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCurrent(<any>response_);
                } catch (e) {
                    return <Observable<RootObject>><any>_observableThrow(e);
                }
            } else
                return <Observable<RootObject>><any>_observableThrow(response_);
        }));
    }

    protected processGetCurrent(response: HttpResponseBase): Observable<RootObject> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RootObject.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RootObject>(<any>null);
    }

    getCurrent2(district: number): Observable<RootObject> {
        let url_ = this.baseUrl + "/api/current/{district}";
        if (district === undefined || district === null)
            throw new Error("The parameter 'district' must be defined.");
        url_ = url_.replace("{district}", encodeURIComponent("" + district)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCurrent2(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCurrent2(<any>response_);
                } catch (e) {
                    return <Observable<RootObject>><any>_observableThrow(e);
                }
            } else
                return <Observable<RootObject>><any>_observableThrow(response_);
        }));
    }

    protected processGetCurrent2(response: HttpResponseBase): Observable<RootObject> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RootObject.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RootObject>(<any>null);
    }

    getLast6Hours(): Observable<RootObject> {
        let url_ = this.baseUrl + "/api/last6h";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetLast6Hours(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetLast6Hours(<any>response_);
                } catch (e) {
                    return <Observable<RootObject>><any>_observableThrow(e);
                }
            } else
                return <Observable<RootObject>><any>_observableThrow(response_);
        }));
    }

    protected processGetLast6Hours(response: HttpResponseBase): Observable<RootObject> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RootObject.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RootObject>(<any>null);
    }

    getLast6Hours2(district: number): Observable<RootObject> {
        let url_ = this.baseUrl + "/api/last6h/{district}";
        if (district === undefined || district === null)
            throw new Error("The parameter 'district' must be defined.");
        url_ = url_.replace("{district}", encodeURIComponent("" + district)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetLast6Hours2(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetLast6Hours2(<any>response_);
                } catch (e) {
                    return <Observable<RootObject>><any>_observableThrow(e);
                }
            } else
                return <Observable<RootObject>><any>_observableThrow(response_);
        }));
    }

    protected processGetLast6Hours2(response: HttpResponseBase): Observable<RootObject> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RootObject.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RootObject>(<any>null);
    }

    getCurrentDay(): Observable<RootObject> {
        let url_ = this.baseUrl + "/api/currentd";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCurrentDay(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCurrentDay(<any>response_);
                } catch (e) {
                    return <Observable<RootObject>><any>_observableThrow(e);
                }
            } else
                return <Observable<RootObject>><any>_observableThrow(response_);
        }));
    }

    protected processGetCurrentDay(response: HttpResponseBase): Observable<RootObject> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RootObject.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RootObject>(<any>null);
    }

    getCurrentDay2(district: number): Observable<RootObject> {
        let url_ = this.baseUrl + "/api/currentd/{district}";
        if (district === undefined || district === null)
            throw new Error("The parameter 'district' must be defined.");
        url_ = url_.replace("{district}", encodeURIComponent("" + district)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCurrentDay2(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCurrentDay2(<any>response_);
                } catch (e) {
                    return <Observable<RootObject>><any>_observableThrow(e);
                }
            } else
                return <Observable<RootObject>><any>_observableThrow(response_);
        }));
    }

    protected processGetCurrentDay2(response: HttpResponseBase): Observable<RootObject> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RootObject.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RootObject>(<any>null);
    }

    getLast2Days(): Observable<RootObject> {
        let url_ = this.baseUrl + "/api/last2d";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetLast2Days(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetLast2Days(<any>response_);
                } catch (e) {
                    return <Observable<RootObject>><any>_observableThrow(e);
                }
            } else
                return <Observable<RootObject>><any>_observableThrow(response_);
        }));
    }

    protected processGetLast2Days(response: HttpResponseBase): Observable<RootObject> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RootObject.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RootObject>(<any>null);
    }

    getLast2Days2(district: number): Observable<RootObject> {
        let url_ = this.baseUrl + "/api/last2d/{district}";
        if (district === undefined || district === null)
            throw new Error("The parameter 'district' must be defined.");
        url_ = url_.replace("{district}", encodeURIComponent("" + district)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetLast2Days2(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetLast2Days2(<any>response_);
                } catch (e) {
                    return <Observable<RootObject>><any>_observableThrow(e);
                }
            } else
                return <Observable<RootObject>><any>_observableThrow(response_);
        }));
    }

    protected processGetLast2Days2(response: HttpResponseBase): Observable<RootObject> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RootObject.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RootObject>(<any>null);
    }
}

export class District implements IDistrict {
    id?: number;
    name?: string | undefined;

    constructor(data?: IDistrict) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): District {
        data = typeof data === 'object' ? data : {};
        let result = new District();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface IDistrict {
    id?: number;
    name?: string | undefined;
}

export class RootObject implements IRootObject {
    lastRefresh?: Date;
    published?: Date;
    title?: string | undefined;
    operations?: Operation[] | undefined;

    constructor(data?: IRootObject) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.lastRefresh = _data["lastRefresh"] ? new Date(_data["lastRefresh"].toString()) : <any>undefined;
            this.published = _data["published"] ? new Date(_data["published"].toString()) : <any>undefined;
            this.title = _data["title"];
            if (Array.isArray(_data["operations"])) {
                this.operations = [] as any;
                for (let item of _data["operations"])
                    this.operations!.push(Operation.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RootObject {
        data = typeof data === 'object' ? data : {};
        let result = new RootObject();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["lastRefresh"] = this.lastRefresh ? this.lastRefresh.toISOString() : <any>undefined;
        data["published"] = this.published ? this.published.toISOString() : <any>undefined;
        data["title"] = this.title;
        if (Array.isArray(this.operations)) {
            data["operations"] = [];
            for (let item of this.operations)
                data["operations"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IRootObject {
    lastRefresh?: Date;
    published?: Date;
    title?: string | undefined;
    operations?: Operation[] | undefined;
}

export class Operation implements IOperation {
    id?: string | undefined;
    operationtype?: string | undefined;
    starttime?: Date;
    endtime?: Date | undefined;
    state?: string | undefined;
    alarmlevel?: number;
    type?: Type | undefined;
    destination?: Destination | undefined;
    units?: Unit[] | undefined;

    constructor(data?: IOperation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.operationtype = _data["operationtype"];
            this.starttime = _data["starttime"] ? new Date(_data["starttime"].toString()) : <any>undefined;
            this.endtime = _data["endtime"] ? new Date(_data["endtime"].toString()) : <any>undefined;
            this.state = _data["state"];
            this.alarmlevel = _data["alarmlevel"];
            this.type = _data["type"] ? Type.fromJS(_data["type"]) : <any>undefined;
            this.destination = _data["destination"] ? Destination.fromJS(_data["destination"]) : <any>undefined;
            if (Array.isArray(_data["units"])) {
                this.units = [] as any;
                for (let item of _data["units"])
                    this.units!.push(Unit.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Operation {
        data = typeof data === 'object' ? data : {};
        let result = new Operation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["operationtype"] = this.operationtype;
        data["starttime"] = this.starttime ? this.starttime.toISOString() : <any>undefined;
        data["endtime"] = this.endtime ? this.endtime.toISOString() : <any>undefined;
        data["state"] = this.state;
        data["alarmlevel"] = this.alarmlevel;
        data["type"] = this.type ? this.type.toJSON() : <any>undefined;
        data["destination"] = this.destination ? this.destination.toJSON() : <any>undefined;
        if (Array.isArray(this.units)) {
            data["units"] = [];
            for (let item of this.units)
                data["units"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IOperation {
    id?: string | undefined;
    operationtype?: string | undefined;
    starttime?: Date;
    endtime?: Date | undefined;
    state?: string | undefined;
    alarmlevel?: number;
    type?: Type | undefined;
    destination?: Destination | undefined;
    units?: Unit[] | undefined;
}

export class Type implements IType {
    id?: string | undefined;
    name?: string | undefined;
    subId?: string | undefined;
    subName?: string | undefined;

    constructor(data?: IType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.subId = _data["subId"];
            this.subName = _data["subName"];
        }
    }

    static fromJS(data: any): Type {
        data = typeof data === 'object' ? data : {};
        let result = new Type();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["subId"] = this.subId;
        data["subName"] = this.subName;
        return data; 
    }
}

export interface IType {
    id?: string | undefined;
    name?: string | undefined;
    subId?: string | undefined;
    subName?: string | undefined;
}

export class Destination implements IDestination {
    title?: string | undefined;
    area?: string | undefined;
    address?: string | undefined;
    city?: string | undefined;
    number?: string | undefined;
    addon?: string | undefined;
    district?: District | undefined;
    geo?: Geo | undefined;

    constructor(data?: IDestination) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            this.area = _data["area"];
            this.address = _data["address"];
            this.city = _data["city"];
            this.number = _data["number"];
            this.addon = _data["addon"];
            this.district = _data["district"] ? District.fromJS(_data["district"]) : <any>undefined;
            this.geo = _data["geo"] ? Geo.fromJS(_data["geo"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Destination {
        data = typeof data === 'object' ? data : {};
        let result = new Destination();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["area"] = this.area;
        data["address"] = this.address;
        data["city"] = this.city;
        data["number"] = this.number;
        data["addon"] = this.addon;
        data["district"] = this.district ? this.district.toJSON() : <any>undefined;
        data["geo"] = this.geo ? this.geo.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IDestination {
    title?: string | undefined;
    area?: string | undefined;
    address?: string | undefined;
    city?: string | undefined;
    number?: string | undefined;
    addon?: string | undefined;
    district?: District | undefined;
    geo?: Geo | undefined;
}

export class Geo implements IGeo {
    latitude?: number;
    longitude?: number;
    mapsLink?: string | undefined;
    type?: string | undefined;

    constructor(data?: IGeo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.latitude = _data["latitude"];
            this.longitude = _data["longitude"];
            this.mapsLink = _data["mapsLink"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): Geo {
        data = typeof data === 'object' ? data : {};
        let result = new Geo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["latitude"] = this.latitude;
        data["longitude"] = this.longitude;
        data["mapsLink"] = this.mapsLink;
        data["type"] = this.type;
        return data; 
    }
}

export interface IGeo {
    latitude?: number;
    longitude?: number;
    mapsLink?: string | undefined;
    type?: string | undefined;
}

export class Unit implements IUnit {
    id?: string | undefined;
    name?: string | undefined;

    constructor(data?: IUnit) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): Unit {
        data = typeof data === 'object' ? data : {};
        let result = new Unit();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface IUnit {
    id?: string | undefined;
    name?: string | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = event => { 
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob); 
        }
    });
}
